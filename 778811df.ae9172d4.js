(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{110:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(m,l(l({ref:t},s),{},{components:n})):a.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),o=(n(0),n(110)),i={id:"api-reference",title:"API Reference"},l={unversionedId:"api/api-reference",id:"api/api-reference",isDocsHomePage:!1,title:"API Reference",description:"Each method can be destructed from the object returned by require('@restqa/restqa').",source:"@site/docs/api/api-references.md",slug:"/api/api-reference",permalink:"/api/api-reference",editUrl:"https://github.com/restqa/documentation/edit/master/docs/api/api-references.md",version:"current",sidebar:"someSidebar",previous:{title:"Cli",permalink:"/api/cli"},next:{title:"Plugin API",permalink:"/api/plugin-api"}},c=[{value:"<code>Install(options)</code>",id:"installoptions",children:[]},{value:"<code>Generate(cmd)</code>",id:"generatecmd",children:[]},{value:"<code>Steps(options)</code>",id:"stepsoptions",children:[]},{value:"<code>Run(options)</code>",id:"runoptions",children:[]}],s={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Each method can be destructed from the object returned by ",Object(o.b)("inlineCode",{parentName:"p"},"require('@restqa/restqa')"),". "),Object(o.b)("hr",null),Object(o.b)("h3",{id:"installoptions"},Object(o.b)("inlineCode",{parentName:"h3"},"Install(options)")),Object(o.b)("p",null,"Generate a configuration file output from an addon install."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"name")," (string) : The name of the addon you want to install (ex: 'slack')"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"configFile")," (string) : Location of the RestQA Configuration File (ex: './restqa.yml')"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"env")," (string) : The target enviironment (from your RestQA config file) (ex: 'local')"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"config")," (object) : Represent the configuration required to setup the addon ")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { Install } = require('@restqa/restqa')\nconst opt = {\n  name: 'slack',\n  env: 'production',\n  configFile: './.restqa.yml',\n  config: {\n    url: 'https://slack.com/incoming-webhook'\n  }\n}\nconst result = Install(opt)\nconsole.log(result)\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml",metastring:"{20-24}","{20-24}":!0}),"version: 0.0.1\nmetadata:\n  code: APP\n  name: app\n  description: Configuration generated by restqa init -y\nenvironments:\n  - name: production\n    default: true\n    plugins:\n      - name: restqapi\n        config:\n          url: https://api.restqa.io\n    outputs:\n      - type: http-html-report\n        enabled: true\n      - type: file\n        enabled: true\n        config:\n          path: restqa-result.json\n      - type: slack\n        enabled: true\n        config:\n          url: hhttps://slack.com/incoming-webhook\n          onlyFailed: false\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This method is printing the output. It will not override your current configuration file.")),Object(o.b)("h3",{id:"generatecmd"},Object(o.b)("inlineCode",{parentName:"h3"},"Generate(cmd)")),Object(o.b)("p",null,"To generate a scenario from a curl command, the process will use the parameter from the curl command to call your server then catch the response and generate a valid RestQA Test Scenario (Gherkin format)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"cmd")," (string) : The curl command of your request (example: curl ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://jsonplaceholder.typicode.com/todos/1"}),"https://jsonplaceholder.typicode.com/todos/1"),")")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { Generate } = require('@restqa/restqa')\n\nasync function main() {\n  let result = await Generate('curl https://jsonplaceholder.typicode.com/todos/1')\n  console.log(result)\n}\n\nmain()\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-gherkin"}),'Given I have the api gateway hosted on "https://jsonplaceholder.typicode.com"\n  And I have the path "/todos/1"\n  And I have the method "GET"\nWhen I run the API\nThen I should receive a response with the status 200\n  And the response body should be equal to:\n  """\n{\n  "userId": 1,\n  "id": 1,\n  "title": "delectus aut autem",\n  "completed": false\n}\n  """\n')),Object(o.b)("h3",{id:"stepsoptions"},Object(o.b)("inlineCode",{parentName:"h3"},"Steps(options)")),Object(o.b)("p",null,"Retrieve the list of step definition availabe for a specific file."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"keyword")," (string) : Step definition keyword (ex: 'given')"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"configFile")," (string) : Specify the configuration file to use (ex: './restqa.yml')"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"tag")," (string) : Filter the step to a specific keyword (ex: 'cookie')")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { Steps } = require('@restqa/restqa')\nconst opt = {\n  keyword: 'then',\n  configFile: './.restqa.yml',\n  tag: 'header',\n}\nconst result = Steps(opt)\nconsole.log(result)\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"[\n  {\n    Plugin: '@restqa/restqapi',\n    Keyword: 'then',\n    Step: 'I should receive a response with the status {int}',\n    Comment: 'Check the response http code'\n  },\n  {\n    Plugin: '@restqa/restqapi',\n    Keyword: 'then',\n    Step: 'the response time is under {int} ms',\n    Comment: 'Check the response latency'\n  },\n  {\n    Plugin: '@restqa/restqapi',\n    Keyword: 'then',\n    Step: 'the header {string} should be {string}',\n    Comment: 'Check if a property in the response header has the exact string value'\n  },\n...\n")),Object(o.b)("h3",{id:"runoptions"},Object(o.b)("inlineCode",{parentName:"h3"},"Run(options)")),Object(o.b)("p",null,"Run the test suite"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"configFile")," (string): Specify the configuration file to use (ex: './restqa.yml')"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"env")," (string): Define the target environemnt"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"stream")," (",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://nodejs.org/api/stream.html#stream_class_stream_writable"}),"Stream"),"): Write stream (default: stdOut)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"path")," (string): Path folder of the test scenario")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { Run } = require('@restqa/restqa')\nconst Stream = require('stream')\n\nconst opt = {\n  configFile: '.restqa.yml',\n  env: 'local',\n  stream: new Stream.Writable()\n}\n  \nRun(opt)\n  .then(result => {\n    console.log(result)\n  })\n  .catch(err => {\n    console.log(err)\n  })\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"{\n  id: 'c28812ec-64ed-4f8d-9538-f5d4f6be9454',\n  startTime: '2021-03-12T09:39:12+00:00',\n  name: 'app',\n  key: 'APP',\n  env: 'local',\n  duration: 0.858,\n  success: false,\n  durationFormat: '00:00',\n...\n")))}p.isMDXComponent=!0}}]);