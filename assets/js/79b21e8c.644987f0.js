(self.webpackChunkrestqa=self.webpackChunkrestqa||[]).push([[8257],{3905:function(e,t,n){"use strict";n.d(t,{kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1188:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var r=n(4034),a=n(9973),o=(n(7294),n(3905)),i={id:"storage",sidebar_label:"File system",title:"File system"},s={unversionedId:"data/storage",id:"data/storage",isDocsHomePage:!1,title:"File system",description:"While writting your test scenario you might need to interact with the file system.",source:"@site/docs/data/storage.md",sourceDirName:"data",slug:"/data/storage",permalink:"/data/storage",editUrl:"https://github.com/restqa/documentation/edit/master/docs/data/storage.md",version:"current",sidebar_label:"File system",frontMatter:{id:"storage",sidebar_label:"File system",title:"File system"},sidebar:"someSidebar",previous:{title:"Integrate with Excel (CSV)",permalink:"/data/excel"},next:{title:"Github Action",permalink:"/ci-cd/github-action"}},l=[{value:"Usage",id:"usage",children:[]}],c={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"While writting your test scenario you might need to interact with the file system."),(0,o.kt)("p",null,"In order to control the access to your file system, RestQA only access the folder that you specify in the configuration file.\nThe path to the folder needs to be relative path from your ",(0,o.kt)("inlineCode",{parentName:"p"},".restqa.yml")," file location."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"The example below we are defining our ",(0,o.kt)("strong",{parentName:"p"},"storage folder")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"tests/integration/data"),".\nThis is the folder where we decided to store all the file that we need to use during the test scenario execution."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{11-12} title=".restqa.yml"',"{11-12}":!0,title:'".restqa.yml"'},"---\n\nversion: 0.0.1\nmetadata:\n  code: SAMPLE\n  name: Sample running on example.com\n  description: E2E test of the public api\nenvironments:\n  - name: sandbox\n    default: true\n    data:\n      storage: 'tests/integration/data'\n    plugins:\n      - name: restqapi\n        config:\n          url: https://api-sandbox.example.com\n")),(0,o.kt)("p",null,"Then we can imagine that we create the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="test/integration/data/my-body.json"',title:'"test/integration/data/my-body.json"'},'{\n  "id": 1,\n  "firstName": "John",\n  "lastName": "Doe"\n}\n')),(0,o.kt)("p",null,"Finally we are able to reuse from some step definition that requires access to the file system such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{2-2}","{2-2}":!0},'Given I have the api gateway\n  And the payload from a file stored at "my-body.json"\nWhen I run the API\n')))}u.isMDXComponent=!0}}]);