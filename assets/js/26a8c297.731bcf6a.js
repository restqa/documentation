(self.webpackChunkrestqa=self.webpackChunkrestqa||[]).push([[5597],{3905:function(e,t,n){"use strict";n.d(t,{kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||l;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1860:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var a=n(4034),r=n(9973),l=(n(7294),n(3905)),i=["components"],o={id:"cli",title:"Cli"},p=void 0,s={unversionedId:"api/cli",id:"api/cli",isDocsHomePage:!1,title:"Cli",description:"Start a new restqa project",source:"@site/docs/api/cli.md",sourceDirName:"api",slug:"/api/cli",permalink:"/api/cli",editUrl:"https://github.com/restqa/documentation/edit/master/docs/api/cli.md",version:"current",frontMatter:{id:"cli",title:"Cli"},sidebar:"someSidebar",previous:{title:"Artillery.io",permalink:"/performance/artillery"},next:{title:"API Reference",permalink:"/api/api-reference"}},u=[{value:"Start a new restqa project",id:"start-a-new-restqa-project",children:[]},{value:"Install a new integration",id:"install-a-new-integration",children:[]},{value:"Step definition",id:"step-definition",children:[{value:"Given",id:"given",children:[]},{value:"When",id:"when",children:[]},{value:"Then",id:"then",children:[]}]},{value:"Run the test",id:"run-the-test",children:[]},{value:"Example project",id:"example-project",children:[]},{value:"Generate Scenario (curl)",id:"generate-scenario-curl",children:[]},{value:"Dashboard",id:"dashboard",children:[]},{value:"Telemetry",id:"telemetry",children:[]},{value:"Environement variable",id:"environement-variable",children:[]}],d={toc:u};function c(e){var t=e.components,o=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"start-a-new-restqa-project"},"Start a new restqa project"),(0,l.kt)("p",null,"As mentioned from the ",(0,l.kt)("a",{parentName:"p",href:"/getting-started/quickstart"},"getting started page"),", in order to run your test automation using RestQA you will need to have a ",(0,l.kt)("inlineCode",{parentName:"p"},".restqa.yml")," file in your folder."),(0,l.kt)("p",null,"Otherwise RestQA client provides a command to pre-configure it for your project."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa init\n")),(0,l.kt)("p",null,"You can also initialize your project without answering the question by using the command : "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa init -y\n")),(0,l.kt)("h2",{id:"install-a-new-integration"},"Install a new integration"),(0,l.kt)("p",null,"Retrieve the list of available integration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa install \n")),(0,l.kt)("p",null,"If you want to install Slack integration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa install slack\n")),(0,l.kt)("p",null,"example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa install <INTEGRATION>\n")),(0,l.kt)("h2",{id:"step-definition"},"Step definition"),(0,l.kt)("p",null,"To get the list of different steps available for your scenario:"),(0,l.kt)("h3",{id:"given"},"Given"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa steps given\n")),(0,l.kt)("h3",{id:"when"},"When"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa steps when\n")),(0,l.kt)("h3",{id:"then"},"Then"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa steps then\n")),(0,l.kt)("p",null,"Example: "),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"cli steps example",src:n(1066).Z})),(0,l.kt)("p",null,"There are options available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Alias"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"}," --tag")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-t")),(0,l.kt)("td",{parentName:"tr",align:null},"Filter the step to a specific keyword"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--config")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-c")),(0,l.kt)("td",{parentName:"tr",align:null},"Specify the configuration file to use"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},".restqa.yml"))))),(0,l.kt)("h2",{id:"run-the-test"},"Run the test"),(0,l.kt)("p",null,"You can run the test by using the command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa run\n")),(0,l.kt)("p",null,"or  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa r\n")),(0,l.kt)("p",null,"A few options are available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Alias"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--config")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-c")),(0,l.kt)("td",{parentName:"tr",align:null},"Specify the configuration file to use"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},".restqa.yml"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"}," --env")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-e")),(0,l.kt)("td",{parentName:"tr",align:null},"Specify the environement to pick from the configuration file"),(0,l.kt)("td",{parentName:"tr",align:null},"Default environment in the config")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"}," --tag")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-t")),(0,l.kt)("td",{parentName:"tr",align:null},"Specify the tag to pre-select features or scenarios"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"example-project"},"Example project"),(0,l.kt)("p",null,"RestQA provides a simple example that you can run using the command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa example\n")),(0,l.kt)("p",null,"or  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa ex\n")),(0,l.kt)("h2",{id:"generate-scenario-curl"},"Generate Scenario (curl)"),(0,l.kt)("p",null,"If your API is already developed and you want a test scenario to check the non-regression, the best is just to generate a scenario from your curl command."),(0,l.kt)("p",null,"Usage: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa generate curl https://jsonplaceholder.typicode.com/todos/1\n")),(0,l.kt)("p",null,"Output (console):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-gherkin"},'Given I have the api gateway hosted on "https://jsonplaceholder.typicode.com"\n  And I have the path "/todos/1"\n  And I have the method "GET"\nWhen I run the API\nThen I should receive a response with the status 200\n  And the response body should be equal to:\n  """\n{\n  "userId": 1,\n  "id": 1,\n  "title": "delectus aut autem",\n  "completed": false\n}\n  """\n')),(0,l.kt)("p",null,"If you want to export the content into a file, you need to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"-o")," option."),(0,l.kt)("p",null,"To export the generated scenario into the file Generated Scenario into the ",(0,l.kt)("inlineCode",{parentName:"p"},"generated.feature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa generate  curl https://jsonplaceholder.typicode.com/todos/1 -o generated.feature\n")),(0,l.kt)("h2",{id:"dashboard"},"Dashboard"),(0,l.kt)("p",null,"If your interested by a user interface to integrate your test.\nYour wish has been granted!"),(0,l.kt)("p",null,"Usage: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa dashboard\n")),(0,l.kt)("p",null,"There are options available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Alias"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--config")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-c")),(0,l.kt)("td",{parentName:"tr",align:null},"Specify the configuration file to use"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},".restqa.yml"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"}," --port")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-p")),(0,l.kt)("td",{parentName:"tr",align:null},"Specify the running http port"),(0,l.kt)("td",{parentName:"tr",align:null},"8081")))),(0,l.kt)("h2",{id:"telemetry"},"Telemetry"),(0,l.kt)("p",null,"The telemetry options can be enabled or disabled as you wishes."),(0,l.kt)("p",null,"Enable the telemetry:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa telemetry on\n")),(0,l.kt)("p",null,"Disable the telemetry:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"restqa telemetry off\n")),(0,l.kt)("h2",{id:"environement-variable"},"Environement variable"),(0,l.kt)("p",null,"In order to override some options, you can use the environment variables below:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RESTQA_TELEMETRY"),": enable or disable the telemetry (value: on | off)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RESTQA_CONFIG"),": Define the location of the ",(0,l.kt)("inlineCode",{parentName:"li"},".restqa.yml")," configuration file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RESTQA_ENV"),": Define the environement to select withing the ",(0,l.kt)("inlineCode",{parentName:"li"},".restqa.yml"))))}c.isMDXComponent=!0},1066:function(e,t,n){"use strict";t.Z=n.p+"assets/images/restqa-steps-719e734b2c30c835b81248b11a5ce52e.gif"}}]);